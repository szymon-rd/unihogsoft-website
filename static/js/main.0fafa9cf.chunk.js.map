{"version":3,"sources":["app/textures/roboto_grid.png","app/particles.js","app/shaders/physics_v.js","app/shaders/physics_f.js","app/shaders/render_v.js","app/shaders/render_f.js","app/shaders/debug_v.js","app/shaders/debug_f.js","app/shaders/copy_v.js","app/shaders/copy_f.js","controls/Control.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","physicsInputTexture","physicsOutputTexture","dataLocationBuffer","viewportQuadBuffer","particleTexture","physicsProgram","renderProgram","debugProgram","copyProgram","frameBuffer","emitIndex","millis","height","width","scale","clock","gl","PARTICLE_COUNT","Math","pow","PARTICLE_COUNT_SQRT","sqrt","PARTICLE_DATA_WIDTH","PARTICLE_DATA_HEIGHT","createShader","source","type","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","createProgram","vSource","fSource","vs","VERTEX_SHADER","fs","FRAGMENT_SHADER","program","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","createPhysicsDataTexture","data","Float32Array","texture","createTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","texImage2D","RGBA","FLOAT","createDataTexture","createParticleTexture","image","Image","src","robotoGrid","LINEAR_MIPMAP_LINEAR","LINEAR","update","UNSIGNED_BYTE","generateMipmap","naturalWidth","onload","createImageTexture","emitParticles","count","radius","size","chars","phiOffset","x","floor","y","chunks","split","chunk","boundary","delta","push","i","j","n","m","index","length","PI","texSubImage2D","init","el","console","log","getContext","getExtension","createContext","Date","now","window","addEventListener","resize","setup","initParticles","toLetterIndices","text","reverse","map","c","codePointAt","deltaC","deltaPhi","innerWidth","u","v","step","buffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","createDataLocationBuffer","createViewportQuadBuffer","vertexPosition","getAttribLocation","physicsData","getUniformLocation","bounds","enableVertexAttribArray","createPhysicsProgram","dataLocation","destSize","time","createRenderProgram","createDebugProgram","createCopyProgram","createFramebuffer","loggedAt","devicePixelRatio","innerHeight","canvas","style","requestAnimationFrame","tick","useProgram","viewport","vertexAttribPointer","FALSE","uniform2f","activeTexture","TEXTURE0","uniform1i","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","drawArrays","TRIANGLE_STRIP","clear","COLOR_BUFFER_BIT","drawingBufferWidth","drawingBufferHeight","TEXTURE1","uniform1f","enable","BLEND","blendFunc","SRC_ALPHA","ONE","POINTS","disable","w","h","ONE_MINUS_SRC_ALPHA","debug","Control","setSpiral","useState","setText","setDeltaC","setDeltaPhi","className","value","onChange","t","target","id","onClick","parseFloat","App","canvasRef","React","createRef","useEffect","current","background","d","ref","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0fafa9cf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/roboto_grid.677831e0.png\";","import robotoGrid from './textures/roboto_grid.png';\nimport physicsVS from './shaders/physics_v';\nimport physicsFS from './shaders/physics_f';\nimport renderVS from './shaders/render_v';\nimport renderFS from './shaders/render_f';\nimport debugVS from './shaders/debug_v';\nimport debugFS from './shaders/debug_f';\nimport copyVS from './shaders/copy_v';\nimport copyFS from './shaders/copy_f';\n\nconst PARTICLE_COUNT = Math.pow(256, 2);\nconst PARTICLE_COUNT_SQRT = Math.sqrt(PARTICLE_COUNT);\nconst PARTICLE_DATA_SLOTS = 1;\nconst PARTICLE_DATA_WIDTH = PARTICLE_COUNT_SQRT * PARTICLE_DATA_SLOTS;\nconst PARTICLE_DATA_HEIGHT = PARTICLE_COUNT_SQRT;\nconst PARTICLE_EMIT_RATE = 10;\n\nlet physicsInputTexture;\nlet physicsOutputTexture;\nlet dataLocationBuffer;\nlet viewportQuadBuffer;\nlet particleTexture;\nlet physicsProgram;\nlet renderProgram;\nlet debugProgram;\nlet copyProgram;\nlet frameBuffer;\nlet container;\nlet emitIndex;\nlet lastEmit;\nlet millis;\nlet height;\nlet width;\nlet scale;\nlet clock;\nlet gl;\n\nconst createContext = (el) => {\n  console.log(el);\n  const gl = el.getContext('webgl') || el.getContext('experimental-webgl');\n  if (!gl) {\n    throw 'WebGL not supported';\n  }\n  if (!gl.getExtension('OES_texture_float')) {\n    throw 'Float textures not supported';\n  }\n  return gl;\n};\n\nconst createShader = (source, type) => {\n  const shader = gl.createShader(type);\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    throw gl.getShaderInfoLog(shader);\n  }\n  return shader;\n};\n\nconst createProgram = (vSource, fSource) => {\n  const vs = createShader(vSource, gl.VERTEX_SHADER);\n  const fs = createShader(fSource, gl.FRAGMENT_SHADER);\n  const program = gl.createProgram();\n  gl.attachShader(program, vs);\n  gl.attachShader(program, fs);\n  gl.linkProgram(program);\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    throw gl.getProgramInfoLog(program);\n  }\n  return program;\n};\n\nconst createImageTexture = (image) => {\n  const texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n  const update = () => {\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n    gl.generateMipmap(gl.TEXTURE_2D);\n  };\n  image.naturalWidth > 0 ? update() : image.onload = update;\n  return texture;\n};\n\nconst createDataTexture = (width, height, data) => {\n  const texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.FLOAT, data);\n  return texture;\n};\n\nconst createFramebuffer = () => {\n  const buffer = gl.createFramebuffer();\n  return buffer;\n};\n\nconst random = (min, max) => {\n  if (typeof min !== 'number') min = 1;\n  if (typeof max !== 'number') max = min; min = 0;\n  return min + Math.random() * (max - min);\n};\n\nconst createPhysicsProgram = () => {\n  const program = createProgram(physicsVS, physicsFS);\n  program.vertexPosition = gl.getAttribLocation(program, 'vertexPosition');\n  program.physicsData = gl.getUniformLocation(program, 'physicsData');\n  program.bounds = gl.getUniformLocation(program, 'bounds');\n  gl.enableVertexAttribArray(program.vertexPosition);\n  return program;\n};\n\nconst createRenderProgram = () => {\n  const program = createProgram(renderVS, renderFS);\n  program.dataLocation = gl.getAttribLocation(program, 'dataLocation');\n  program.particleTexture = gl.getUniformLocation(program, 'particleTexture');\n  program.physicsData = gl.getUniformLocation(program, 'physicsData');\n  program.destSize = gl.getUniformLocation(program, 'destSize');\n  program.time = gl.getUniformLocation(program, 'time');\n  gl.enableVertexAttribArray(program.dataLocation);\n  return program;\n};\n\nconst createDebugProgram = () => {\n  const program = createProgram(debugVS, debugFS);\n  program.vertexPosition = gl.getAttribLocation(program, 'vertexPosition');\n  program.texture = gl.getUniformLocation(program, 'texture');\n  gl.enableVertexAttribArray(program.vertexPosition);\n  return program;\n};\n\nconst createCopyProgram = () => {\n  const program = createProgram(copyVS, copyFS);\n  program.vertexPosition = gl.getAttribLocation(program, 'vertexPosition');\n  program.texture = gl.getUniformLocation(program, 'texture');\n  gl.enableVertexAttribArray(program.vertexPosition);\n  return program;\n};\n\nconst createPhysicsDataTexture = () => {\n  const size = 4 * PARTICLE_COUNT * PARTICLE_DATA_SLOTS;\n  const data = new Float32Array(size);\n  return createDataTexture(PARTICLE_DATA_WIDTH, PARTICLE_DATA_HEIGHT, data);\n};\n\nconst createParticleTexture = () => {\n  const image = new Image();\n  image.src = robotoGrid;\n  return createImageTexture(image);\n};\n\nconst createDataLocationBuffer = () => {\n  const data = new Float32Array(PARTICLE_COUNT * 2);\n  const step = 1 / PARTICLE_COUNT_SQRT;\n  for (let u, v, i = 0; i < PARTICLE_COUNT; i++) {\n    u = i * 2;\n    v = u + 1;\n    data[u] = step * Math.floor(i % PARTICLE_COUNT_SQRT);\n    data[v] = step * Math.floor(i / PARTICLE_COUNT_SQRT);\n  }\n  const buffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n  gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);\n  return buffer;\n};\n\nconst createViewportQuadBuffer = () => {\n  const data = new Float32Array([-1, -1, 1, -1, -1, 1, 1, 1]);\n  const buffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n  gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);\n  return buffer;\n};\n\nconst emitParticles = (count, radius, size, chars, phiOffset=0) => {\n  gl.bindTexture(gl.TEXTURE_2D, physicsInputTexture);\n  const x = Math.floor((emitIndex * PARTICLE_DATA_SLOTS) % PARTICLE_DATA_WIDTH);\n  const y = Math.floor(emitIndex / PARTICLE_DATA_HEIGHT);\n  const chunks = [[x, y, count * PARTICLE_DATA_SLOTS]];\n  const split = (chunk) => {\n    const boundary = chunk[0] + chunk[2];\n    if (boundary > PARTICLE_DATA_WIDTH) {\n      const delta = boundary - PARTICLE_DATA_WIDTH;\n      chunk[2] -= delta;\n      chunk = [0, (chunk[1] + 1) % PARTICLE_DATA_HEIGHT, delta];\n      chunks.push(chunk);\n      split(chunk);\n    }\n  };\n  split(chunks[0]);\n  let i, j, n, m, chunk, data, index = 0;\n  for (i = 0, n = chunks.length; i < n; i++) {\n    chunk = chunks[i];\n    data = [];\n    for (j = 0, m = chunk[2]; j < m; j++) {\n      data.push(\n        (2*Math.PI / count) * index + phiOffset,\n        radius,\n        size,\n        chars[index % chars.length]\n      );\n      index++;\n    }\n    gl.texSubImage2D(\n      gl.TEXTURE_2D, 0, chunk[0], chunk[1], chunk[2], 1,\n      gl.RGBA, gl.FLOAT, new Float32Array(data)\n    );\n  }\n  emitIndex += count;\n  emitIndex %= PARTICLE_COUNT;\n};\n\n\n// ——————————————————————————————————————————————————\n// Main\n// ——————————————————————————————————————————————————\n\nexport const init = (el) => {\n  gl = createContext(el);\n  container = el;\n  emitIndex = 0;\n  millis = 0;\n  clock = Date.now();\n  // document.addEventListener('touchmove', touch);\n  // document.addEventListener('mousemove', touch);\n  window.addEventListener('resize', resize);\n  setup();\n  resize();\n  initParticles(\"JEZE   \", 0, 0.4);\n  update();\n};\n\nconst toLetterIndices = (text) => {\n  return text.split('').reverse().map(c => c.codePointAt(0) - 65)\n}\n\nconst initParticles = (text, deltaC, deltaPhi) => {\n  for(let i = 17; i < 100; i++) {\n    emitParticles(100 + i * deltaC, ((20 + (3 * i) + (0.5*0.5*i*i)) / window.innerWidth) / 2, (3 + (i/2)) / 2, toLetterIndices(text), i*deltaPhi);\n  }\n};\n\nconst cleanParticleData = () => {\n  const a = []\n  for(let i = 0; i < PARTICLE_DATA_WIDTH * PARTICLE_DATA_HEIGHT* 4; i++) {\n    a.push([0.0,0.0,0.0,0.0])\n  }\n  gl.bindTexture(gl.TEXTURE_2D, physicsInputTexture);\n  gl.texSubImage2D(\n    gl.TEXTURE_2D, 0, 0, 0, PARTICLE_DATA_WIDTH, PARTICLE_DATA_WIDTH,\n    gl.RGBA, gl.FLOAT, new Float32Array(a)\n  );\n}\n\nexport const resetSpiral = (text, deltaC, deltaPhi) => {\n  //cleanParticleData();\n  emitIndex = 0;\n  initParticles(text, deltaC, deltaPhi);\n}\n\nconst setup = () => {\n  physicsInputTexture = createPhysicsDataTexture();\n  physicsOutputTexture = createPhysicsDataTexture();\n  dataLocationBuffer = createDataLocationBuffer();\n  viewportQuadBuffer = createViewportQuadBuffer();\n  particleTexture = createParticleTexture();\n  physicsProgram = createPhysicsProgram();\n  renderProgram = createRenderProgram();\n  debugProgram = createDebugProgram();\n  copyProgram = createCopyProgram();\n  frameBuffer = createFramebuffer();\n};\n\nconst physics = () => {\n  gl.useProgram(physicsProgram);\n  gl.viewport(0, 0, PARTICLE_DATA_WIDTH, PARTICLE_DATA_HEIGHT);\n  gl.bindBuffer(gl.ARRAY_BUFFER, viewportQuadBuffer);\n  gl.vertexAttribPointer(physicsProgram.vertexPosition, 2, gl.FLOAT, gl.FALSE, 0, 0);\n  gl.uniform2f(physicsProgram.bounds, PARTICLE_DATA_WIDTH, PARTICLE_DATA_HEIGHT);\n  gl.activeTexture(gl.TEXTURE0);\n  gl.bindTexture(gl.TEXTURE_2D, physicsInputTexture);\n  gl.uniform1i(physicsProgram.physicsData, 0);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, physicsOutputTexture, 0);\n  gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n};\n\nconst copy = () => {\n  gl.useProgram(copyProgram);\n  gl.viewport(0, 0, PARTICLE_DATA_WIDTH, PARTICLE_DATA_HEIGHT);\n  gl.bindBuffer(gl.ARRAY_BUFFER, viewportQuadBuffer);\n  gl.vertexAttribPointer(copyProgram.vertexPosition, 2, gl.FLOAT, gl.FALSE, 0, 0);\n  gl.activeTexture(gl.TEXTURE0);\n  gl.bindTexture(gl.TEXTURE_2D, physicsOutputTexture);\n  gl.uniform1i(copyProgram.physicsData, 0);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, physicsInputTexture, 0);\n  gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n};\n\nconst debug = () => {\n  const x = 16 * scale;\n  const y = 16 * scale;\n  const w = 360 * scale;\n  const h = 180 * scale;\n  gl.useProgram(debugProgram);\n  gl.viewport(x, y, w, h);\n  gl.bindBuffer(gl.ARRAY_BUFFER, viewportQuadBuffer);\n  gl.vertexAttribPointer(physicsProgram.vertexPosition, 2, gl.FLOAT, gl.FALSE, 0, 0);\n  gl.activeTexture(gl.TEXTURE0);\n  gl.bindTexture(gl.TEXTURE_2D, physicsOutputTexture);\n  gl.uniform1i(debugProgram.texture, 0);\n  gl.enable(gl.BLEND);\n  gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n  gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n  gl.disable(gl.BLEND);\n};\n\nconst render = () => {\n  gl.useProgram(renderProgram);\n  gl.clear(gl.COLOR_BUFFER_BIT);\n  gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n  gl.bindBuffer(gl.ARRAY_BUFFER, dataLocationBuffer);\n  gl.vertexAttribPointer(renderProgram.dataLocation, 2, gl.FLOAT, gl.FALSE, 0, 0);\n  gl.activeTexture(gl.TEXTURE0);\n  gl.bindTexture(gl.TEXTURE_2D, physicsOutputTexture);\n  gl.uniform1i(renderProgram.physicsData, 0);\n  gl.activeTexture(gl.TEXTURE1);\n  gl.bindTexture(gl.TEXTURE_2D, particleTexture);\n  gl.uniform1i(renderProgram.particleTexture, 1);\n  gl.uniform2f(renderProgram.destSize, window.innerWidth, window.innerHeight);\n  gl.uniform1f(renderProgram.time, millis);\n  gl.enable(gl.BLEND);\n  gl.blendFunc(gl.SRC_ALPHA, gl.ONE);\n  gl.drawArrays(gl.POINTS, 0, PARTICLE_COUNT);\n  gl.disable(gl.BLEND);\n};\n\nlet loggedAt = 0;\n\nconst tick = () => {\n  const now = Date.now();\n  const delta = now - clock;\n  if((now - loggedAt) > 1000) {\n    console.log(\"FPS: \" + 1000.0/delta);\n    loggedAt = now;\n  }\n  millis += now - clock || 0;\n  clock = now;\n};\n\nconst spawn = () => {\n  // if (millis < 3000) {\n  //   emitParticles(800, [\n  //     -1.0 + Math.sin(millis * 0.001) * 2.0,\n  //     -0.2 + Math.cos(millis * 0.004) * 0.5,\n  //     Math.sin(millis * 0.015) * -0.05\n  //   ]);\n  // }\n};\n\nconst touch = (event) => {\n  if (millis - lastEmit < 20) return;\n  const touches = event.changedTouches || [event];\n  const limit = PARTICLE_EMIT_RATE / touches.length;\n  for (let i = 0; i < touches.length; i++) {\n    const touch = touches[i];\n    const x = (touch.clientX / width) * 2 - 1;\n    const y = (touch.clientY / height) * -2 + 1;\n    emitParticles(limit, [x, y, 0]);\n  }\n  lastEmit = millis;\n};\n\nconst resize = () => {\n  scale = window.devicePixelRatio || 1;\n  width = window.innerWidth;\n  height = window.innerHeight;\n  gl.canvas.width = width * scale;\n  gl.canvas.height = height * scale;\n  gl.canvas.style.width = width + 'px';\n  gl.canvas.style.height = height + 'px';\n};\n\nconst update = () => {\n  requestAnimationFrame(update);\n  tick();\n  spawn();\n  physics();\n  copy();\n  render();\n  debug();\n};\n\n","export default `\n\nattribute vec2 vertexPosition;\nvoid main() {\n  gl_Position = vec4(vertexPosition, 1, 1);\n}\n`;","export default `\nprecision mediump float;\nuniform sampler2D physicsData;\nuniform vec2 bounds;\nconst vec3 TARGET = vec3(0, 0, 0.01);\nvec4 texel(vec2 offset) {\n  vec2 coord = (gl_FragCoord.xy + offset) / bounds;\n  return texture2D(physicsData, coord);\n}\nvoid main() {\n  int slot = int(mod(gl_FragCoord.x, 2.0));\n  vec4 t = texel(vec2(0,0));\n  gl_FragColor = t;\n}\n`;","export default `\n#define PI 3.1415926538\nattribute vec2 dataLocation;\nuniform sampler2D physicsData;\nuniform mediump float time;\nuniform vec2 destSize;\nvarying mediump float index;\nvarying mediump float sin_factor;\nvarying mediump float cos_factor;\nvarying mediump float ttime;\nvoid main() {\n  vec4 particle = texture2D(physicsData, dataLocation);\n  float phi = particle.x;\n  float r = particle.y;\n  if(abs(r) < 0.01) {\n    gl_Position = vec4(-2, -2, 0, 1);\n  } else {\n    float aspectRatio = destSize.x / destSize.y;\n    float finalPhi = phi + (time / 10000.0);\n    float x = cos(finalPhi) * r;\n    float y = sin(finalPhi) * r * aspectRatio;\n    index = particle.w;\n    sin_factor = sin(-finalPhi + (PI / 2.0));\n    cos_factor = cos(-finalPhi + (PI / 2.0));\n    ttime = time;\n    gl_Position = vec4(x, y, 0, 1);\n    gl_PointSize = particle.z;\n  }\n}\n`;","export default `\nuniform sampler2D particleTexture;\nvarying mediump float index;\nvarying mediump float sin_factor;\nvarying mediump float cos_factor;\nvarying mediump float ttime;\nvoid main() {\n  \n  int j = int(index);\n  int i = j;\n  int y = i / 8;\n  int x = i - (y * 8);\n  mediump vec2 rotatedPointCoord = vec2((gl_PointCoord.x - 0.5), gl_PointCoord.y - 0.5) * mat2(cos_factor, sin_factor, -sin_factor, cos_factor) + vec2(0.5);\n  mediump vec2 texCoord = rotatedPointCoord.xy / 8.0;\n  mediump vec2 position = vec2(0.125 * float(x), 0.125 * float(y)) + (texCoord);\n  mediump vec4 textureColor = texture2D(particleTexture, position);\n  mediump vec4 color = vec4(vec3(1.0) - textureColor.rgb, textureColor.a);\n  gl_FragColor = color;\n}\n`;","export default `\nattribute vec2 vertexPosition;\nvarying vec2 coord;\nvoid main() {\n  coord = (vertexPosition + 1.0) / 2.0;\n  gl_Position = vec4(vertexPosition, 1, 1);\n}\n`;","export default `\nprecision mediump float;\nuniform sampler2D texture;\nvarying vec2 coord;\nvoid main() {\n  vec3 rgb = texture2D(texture, coord).xyz;\n  gl_FragColor = vec4(rgb, 0.5);\n}\n`;","export default `\nattribute vec2 vertexPosition;\nvarying vec2 coord;\nvoid main() {\n  coord = (vertexPosition + 1.0) / 2.0;\n  gl_Position = vec4(vertexPosition, 1, 1);\n}\n`;","export default `\nprecision mediump float;\nuniform sampler2D texture;\nvarying vec2 coord;\nvoid main() {\n  gl_FragColor = texture2D(texture, coord);\n}\n`;","import { SpiralProps } from \"../App\";\nimport React, { Suspense, useEffect, useState } from 'react';\nimport \"./Control.css\"\n\ninterface Props {\n  setSpiral: (props: SpiralProps) => void\n}\n\nexport const Control = ({setSpiral}: Props) => {\n\n  const [text, setText] = useState(\"JEZE\");\n  const [deltaC, setDeltaC] = useState(\"0.1\");\n  const [deltaPhi, setDeltaPhi] = useState(\"0.1\");\n\n  const submitSpiralProps = () => {\n    setSpiral({text, deltaC: parseFloat(deltaC), deltaPhi: parseFloat(deltaPhi)})\n  }\n\n  return (\n    <div className=\"control\">\n      <div className=\"row\">\n        <div className=\"desc\">Text</div>\n        <input className=\"valIn\" type=\"text\" value={text} onChange={t => setText(t.target.value)} />\n      </div>\n      <div className=\"row\">\n        <div className=\"desc\">ΔC</div>\n        <input className=\"valIn\" type=\"text\" value={deltaC} onChange={t => setDeltaC(t.target.value)} />\n      </div>\n      <div className=\"row\">\n        <div className=\"desc\">ΔPhi</div>\n        <input className=\"valIn\" type=\"text\" value={deltaPhi} onChange={t => setDeltaPhi(t.target.value)} />\n      </div>\n      <div className=\"row\" id=\"btnRow\">\n        <button onClick={submitSpiralProps}>Update</button>\n      </div>\n    </div>\n  )\n}","import React, { Suspense, useEffect } from 'react';\nimport './App.css';\nimport { init, resetSpiral } from './app/particles'\nimport { Control } from './controls/Control';\n\nexport interface SpiralProps {\n  text: string,\n  deltaC: number,\n  deltaPhi: number\n}\n\nfunction App() {\n  const canvasRef = React.createRef<HTMLCanvasElement>();\n  useEffect(() => {\n    const gl = canvasRef.current?.getContext('webgl');\n    console.log(gl)\n    init(canvasRef.current)\n  }, [])\n  return (\n    <div className=\"App\" style={{ background: 'radial-gradient(circle, rgba(0,0,0,1) 0%, rgba(20,20,20,1) 70%, rgba(18,18,18,1) 100%)' }}>\n        <Control setSpiral={d => resetSpiral(d.text, d.deltaC, d.deltaPhi)}></Control>\n        <canvas style={{width: \"100%\", height:\"100%\"}} ref={canvasRef}></canvas>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}